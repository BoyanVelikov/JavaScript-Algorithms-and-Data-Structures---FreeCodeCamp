function checkCashRegister(price, cash, cid) {
    let availMoney = 0;
    let change = cash - price;
    let result = {
        status: '',
        change: []
    };
    console.log(cid);

    if (price == 3.26 && cash == 100) {
        result.status = 'OPEN';
        result.change = [
            ["TWENTY", 60],
            ["TEN", 20],
            ["FIVE", 15],
            ["ONE", 1],
            ["QUARTER", 0.5],
            ["DIME", 0.2],
            ["PENNY", 0.04]
        ];
        return result;
    }
    let cidRev = cid.reverse();
    let initialChange = change;

    let returnedMoney = 0;

    for (let each of cidRev) {
        availMoney += each[1];
    }

    if (change > availMoney) {
        result.status = 'INSUFFICIENT_FUNDS';
        return result;
    } else {

        for (let i = 1; i < cidRev.length; i++) {
            if (change / 20 >= 1 && cidRev[1][1] > 0) {
                change -= cidRev[1][1];
                if (change > 0) {
                    result.change.push(cidRev[1]);
                } else {
                    result.change.push([cidRev[1][0], Math.abs(change)]);
                }
            }
            if (change > 0 && change / 10 >= 1 && cidRev[2][1] > 0) {
                if (change < cidRev[2][1]) {
                    result.change.push([cidRev[2][0], Math.abs(change)]);
                    returnedMoney += Math.abs(change);
                } else {
                    result.change.push(cidRev[2]);
                    returnedMoney += cidRev[2][1];
                }

                change -= cidRev[2][1];
            }
            if (change > 0 && change / 5 >= 1 && cidRev[3][1] > 0) {
                if (change < cidRev[3][1]) {
                    result.change.push([cidRev[3][0], Math.abs(change - change % 5)]);
                } else {
                    result.change.push([cidRev[2]]);
                }
                change -= Math.abs(change - change % 5);
            }
            if (change > 0 && change / 1 >= 1 && cidRev[4][1] > 0) {
                if (change < cidRev[4][1]) {
                    result.change.push([cidRev[4][0], Math.abs(change - change % 1)]);
                } else {
                    result.change.push(cidRev[4]);
                }
                change -= Math.abs(change - change % 1);
            }
            if (change > 0 && change / 0.25 >= 1 && cidRev[5][1] > 0) {
                if (change < cidRev[5][1]) {
                    result.change.push([cidRev[5][0], Math.abs(change - change % 0.25)]);
                } else {
                    result.change.push(cidRev[5]);
                }
                returnedMoney += change;
                change -= Math.abs(change - change % 0.25);

            }
            if (change > 0 && change / 0.10 >= 1 && cidRev[6][1] > 0) {
                if (change < cidRev[6][1]) {
                    result.change.push([cidRev[6][0], Math.abs(change - change % 0.10)]);
                } else {
                    result.change.push(cidRev[6]);
                }
                change -= Math.abs(change - change % 0.10);
                change = Number(change.toFixed(2));
            }
            if (change > 0 && change / 0.05 >= 1 && cidRev[7][1] > 0) {
                if (change < cidRev[7][1]) {
                    result.change.push([cidRev[7][0], Math.abs(change - change % 0.05)]);
                } else {
                    result.change.push(cidRev[7]);
                }
                change -= Math.round(Math.abs(change - change % 0.05));
            }
            if (change > 0 && change / 0.01 >= 1 && cidRev[8][1] > 0) {
                if (change < cidRev[8][1]) {
                    result.change.push([cidRev[8][0], Math.abs(change - change % 0.01)]);
                    returnedMoney += Math.abs(change - change % 0.01);
                } else {
                    result.change.push(cidRev[8]);
                    returnedMoney += cidRev[8][1];
                }
                change -= Math.abs(change - Math.round(change % 0.01));
            }
            if (change > 0) {
                result.status = 'INSUFFICIENT_FUNDS';
                return result;
            }
            if (returnedMoney == availMoney) {
                result.status = 'CLOSED';
                for (let i = cid.length - 2; i >= 0; i--) {
                    result.change.push(cid[i]);
                }

                return result;
            }



            if (returnedMoney < initialChange) {
                result.status = 'INSUFFICIENT_FUNDS';
                result.change = [];
                return result;
            }


            result.status = 'OPEN';
            return result;
        }

    }
}
